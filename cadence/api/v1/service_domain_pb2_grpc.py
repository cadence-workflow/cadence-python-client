# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from cadence.api.v1 import service_domain_pb2 as cadence_dot_api_dot_v1_dot_service__domain__pb2

GRPC_GENERATED_VERSION = '1.71.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in cadence/api/v1/service_domain_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class DomainAPIStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterDomain = channel.unary_unary(
                '/uber.cadence.api.v1.DomainAPI/RegisterDomain',
                request_serializer=cadence_dot_api_dot_v1_dot_service__domain__pb2.RegisterDomainRequest.SerializeToString,
                response_deserializer=cadence_dot_api_dot_v1_dot_service__domain__pb2.RegisterDomainResponse.FromString,
                _registered_method=True)
        self.DescribeDomain = channel.unary_unary(
                '/uber.cadence.api.v1.DomainAPI/DescribeDomain',
                request_serializer=cadence_dot_api_dot_v1_dot_service__domain__pb2.DescribeDomainRequest.SerializeToString,
                response_deserializer=cadence_dot_api_dot_v1_dot_service__domain__pb2.DescribeDomainResponse.FromString,
                _registered_method=True)
        self.ListDomains = channel.unary_unary(
                '/uber.cadence.api.v1.DomainAPI/ListDomains',
                request_serializer=cadence_dot_api_dot_v1_dot_service__domain__pb2.ListDomainsRequest.SerializeToString,
                response_deserializer=cadence_dot_api_dot_v1_dot_service__domain__pb2.ListDomainsResponse.FromString,
                _registered_method=True)
        self.UpdateDomain = channel.unary_unary(
                '/uber.cadence.api.v1.DomainAPI/UpdateDomain',
                request_serializer=cadence_dot_api_dot_v1_dot_service__domain__pb2.UpdateDomainRequest.SerializeToString,
                response_deserializer=cadence_dot_api_dot_v1_dot_service__domain__pb2.UpdateDomainResponse.FromString,
                _registered_method=True)
        self.DeprecateDomain = channel.unary_unary(
                '/uber.cadence.api.v1.DomainAPI/DeprecateDomain',
                request_serializer=cadence_dot_api_dot_v1_dot_service__domain__pb2.DeprecateDomainRequest.SerializeToString,
                response_deserializer=cadence_dot_api_dot_v1_dot_service__domain__pb2.DeprecateDomainResponse.FromString,
                _registered_method=True)
        self.DeleteDomain = channel.unary_unary(
                '/uber.cadence.api.v1.DomainAPI/DeleteDomain',
                request_serializer=cadence_dot_api_dot_v1_dot_service__domain__pb2.DeleteDomainRequest.SerializeToString,
                response_deserializer=cadence_dot_api_dot_v1_dot_service__domain__pb2.DeleteDomainResponse.FromString,
                _registered_method=True)


class DomainAPIServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterDomain(self, request, context):
        """RegisterDomain creates a new domain which can be used as a container for all resources.  Domain is a top level
        entity within Cadence, used as a container for all resources like workflow executions, task lists, etc.  Domain
        acts as a sandbox and provides isolation for all resources within the domain.  All resources belongs to exactly one
        domain.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DescribeDomain(self, request, context):
        """DescribeDomain returns the information and configuration for a registered domain.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDomains(self, request, context):
        """ListDomains returns the information and configuration for all domains.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateDomain(self, request, context):
        """UpdateDomain is used to update the information and configuration for a registered domain.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeprecateDomain(self, request, context):
        """DeprecateDomain us used to update status of a registered domain to DEPRECATED.  Once the domain is deprecated
        it cannot be used to start new workflow executions.  Existing workflow executions will continue to run on
        deprecated domains.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteDomain(self, request, context):
        """DeleteDomain permanently removes a domain record. This operation:
        - Requires domain to be in DEPRECATED status
        - Cannot be performed on domains with running workflows
        - Is irreversible and removes all domain data
        - Requires proper permissions and security token
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DomainAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterDomain': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterDomain,
                    request_deserializer=cadence_dot_api_dot_v1_dot_service__domain__pb2.RegisterDomainRequest.FromString,
                    response_serializer=cadence_dot_api_dot_v1_dot_service__domain__pb2.RegisterDomainResponse.SerializeToString,
            ),
            'DescribeDomain': grpc.unary_unary_rpc_method_handler(
                    servicer.DescribeDomain,
                    request_deserializer=cadence_dot_api_dot_v1_dot_service__domain__pb2.DescribeDomainRequest.FromString,
                    response_serializer=cadence_dot_api_dot_v1_dot_service__domain__pb2.DescribeDomainResponse.SerializeToString,
            ),
            'ListDomains': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDomains,
                    request_deserializer=cadence_dot_api_dot_v1_dot_service__domain__pb2.ListDomainsRequest.FromString,
                    response_serializer=cadence_dot_api_dot_v1_dot_service__domain__pb2.ListDomainsResponse.SerializeToString,
            ),
            'UpdateDomain': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateDomain,
                    request_deserializer=cadence_dot_api_dot_v1_dot_service__domain__pb2.UpdateDomainRequest.FromString,
                    response_serializer=cadence_dot_api_dot_v1_dot_service__domain__pb2.UpdateDomainResponse.SerializeToString,
            ),
            'DeprecateDomain': grpc.unary_unary_rpc_method_handler(
                    servicer.DeprecateDomain,
                    request_deserializer=cadence_dot_api_dot_v1_dot_service__domain__pb2.DeprecateDomainRequest.FromString,
                    response_serializer=cadence_dot_api_dot_v1_dot_service__domain__pb2.DeprecateDomainResponse.SerializeToString,
            ),
            'DeleteDomain': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteDomain,
                    request_deserializer=cadence_dot_api_dot_v1_dot_service__domain__pb2.DeleteDomainRequest.FromString,
                    response_serializer=cadence_dot_api_dot_v1_dot_service__domain__pb2.DeleteDomainResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'uber.cadence.api.v1.DomainAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('uber.cadence.api.v1.DomainAPI', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DomainAPI(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterDomain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/uber.cadence.api.v1.DomainAPI/RegisterDomain',
            cadence_dot_api_dot_v1_dot_service__domain__pb2.RegisterDomainRequest.SerializeToString,
            cadence_dot_api_dot_v1_dot_service__domain__pb2.RegisterDomainResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DescribeDomain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/uber.cadence.api.v1.DomainAPI/DescribeDomain',
            cadence_dot_api_dot_v1_dot_service__domain__pb2.DescribeDomainRequest.SerializeToString,
            cadence_dot_api_dot_v1_dot_service__domain__pb2.DescribeDomainResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListDomains(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/uber.cadence.api.v1.DomainAPI/ListDomains',
            cadence_dot_api_dot_v1_dot_service__domain__pb2.ListDomainsRequest.SerializeToString,
            cadence_dot_api_dot_v1_dot_service__domain__pb2.ListDomainsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateDomain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/uber.cadence.api.v1.DomainAPI/UpdateDomain',
            cadence_dot_api_dot_v1_dot_service__domain__pb2.UpdateDomainRequest.SerializeToString,
            cadence_dot_api_dot_v1_dot_service__domain__pb2.UpdateDomainResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeprecateDomain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/uber.cadence.api.v1.DomainAPI/DeprecateDomain',
            cadence_dot_api_dot_v1_dot_service__domain__pb2.DeprecateDomainRequest.SerializeToString,
            cadence_dot_api_dot_v1_dot_service__domain__pb2.DeprecateDomainResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteDomain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/uber.cadence.api.v1.DomainAPI/DeleteDomain',
            cadence_dot_api_dot_v1_dot_service__domain__pb2.DeleteDomainRequest.SerializeToString,
            cadence_dot_api_dot_v1_dot_service__domain__pb2.DeleteDomainResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
